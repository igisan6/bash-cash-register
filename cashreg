#!/bin/bash

function display_version() {
    cat <<EOF

Cash Register v0.1

EOF
}

function show_help() {
    cat<<EOF

Items
  d  list by description
  i  list by item number
  p  list by price
Transactions
  [[-]#] ####  add +/- quantity
  s  show cart
  t  show total
  a  abort transaction
  f  finalize transaction
Other
  q  quit

EOF
}

function sort_description() {
    awk 'BEGIN{ print "Code     Price  Description" }; { printf "%s%10s  %s\n",\
    $1, $2, $3 }' FS='\t' items.dat | (sed -u 1q; sort -k 3) | less
}

function sort_number() {
    awk 'BEGIN{ print "Code     Price  Description" }; { printf "%s%10s  %s\n",\
    $1, $2, $3 }' FS='\t' items.dat | (sed -u 1q; sort -k 1) | less
}

function sort_price() {
    awk 'BEGIN{ print "Code     Price  Description" }; { printf "%s%10s  %s\n",\
    $1, $2, $3 }' FS='\t' items.dat | (sed -u 1q; sort -k 2 -g) | less
}

function show_cart() {
    echo
    if [ ! -s .cart ]; then
	printf "Empty.\n"
    else
	awk '
	    BEGIN{ print "Quantity    Code     Price  Description" };
	    { printf "%8s%8s%10s  %s\n", $1, $2, $3, $4 }
	    ' FS='\t' .cart
    fi
    echo
}

function get_total() {
    if [ -f .cart ];
    then
      total=$(awk '{ total+=($1*$3) } END { print total }' .cart)
      echo $total
    else
      total="0.00"
      echo $total
    fi
}

function show_total() {
    total=$(get_total)
    printf "\nTotal: %s\n\n" "$total"
}

function abort_transaction() {
    echo
    read -p 'Abort transaction (Yes/No)? ' selection

    while [ "$selection" != "No" ]
    do
	     if [ "$selection" = "Yes" ];
	     then
	        > .cart
          echo
	        return 1
	     fi
	     read -p 'Abort transaction (Yes/No)? ' selection
    done
    echo
}

function finalize_transaction() {
    total=$(echo $(get_total) | cut -d':' -f2)
    printf "\n"

    if [ $(echo "$total < 0" | bc) == 1 ];
    then
	    printf "Change: $total\n\nGenerating PDF...\nDisplaying PDF...\n\n"
	    generate_receipt
      return 0
    fi

    # If the cart is empty or the total is 0, print the correct change
    if [ $(echo "$total == 0" | bc) == 1 ];
    then
        echo -e "Change: 0.00\n"
        return 0
    fi

    read -p "Enter payment ($total remaining, blank to abort): " payment

    # If the input is blank, abort the function
    if [[ $payment = "" ]];
    then
        echo
        return 0
    fi

    # If overpaid, calculate the change and generate the receipt
    if [ $(echo "$payment > $total" | bc) == 1 ];
    then
      total=$(echo "$payment - $total" | bc)
      printf "Change: $total\n\nGenerating PDF...\nDisplaying PDF...\n\n"
      generate_receipt
    else
      # If balance is due, keep prompting for payment
      while [ $(echo "$total - $payment > 0" | bc) == 1 ];
      do
        total=$(echo "$total - $payment" | bc)
        read -p "Enter payment ($total remaining, blank to abort): " payment

        if [[ $payment = "" ]];
        then
            echo
            return 0
        fi
      done

      # If overpaid, calculate the change and generate the receipt
      if [ $(echo "$payment > $total" | bc) == 1 ];
      then
        total=$(echo "$payment - $total" | bc)
        printf "Change: $total\n\nGenerating PDF...\nDisplaying PDF...\n\n"
        generate_receipt
      # If payment is exact, print 0 for change and generate the receipt
      elif [ $(echo "$payment == $total" | bc) == 1 ];
      then
        printf "\nChange: 0.00\n\nGenerating PDF...\nDisplaying PDF...\n\n"
        generate_receipt
      fi
    fi
}

function generate_receipt() {
  # Use associative arrays to store the item attributes
  awk -F '\t' '
  {
    # Item Number : Quantity
    quantity[$2] += $1
    # Item Number : Price
    price[$2] = $3
    # Item Number : Description
    description[$2] = $4
  }

  END {
    for (i in array)
      printf "%s,%s,%s,%s\n", i, description[i], quantity[i], price[i]
  }
  ' .cart > .receipt

  # Remove items with a count of 0 from receipt and sort by item number
  awk -F',' '$3 != 0' .receipt > temp && mv temp .receipt
  sort -k1 -n -o .receipt{,}

  # Create and display PDF
  pdflatex receipt < /dev/null > /dev/null
  evince receipt.pdf
}

function add_cart() {
    if [ "$#" -eq 1 ];
    then
    	line=$(awk -v pat="$1" '$0~pat' items.dat)
      read id price desc <<< $line
      printf "\nAdded 1 x %s @ %s each\n\n" "$desc" "$price"
      printf "1\t%s\t%s\t%s\n" "$1" "$price" "$desc" >> .cart
    elif [ "$#" -eq 2 ];
    then
    	quantity=$1
    	line=$(awk -v pat="$2" '$0~pat' items.dat)
    	read id price desc <<< $line
    	printf "\nAdded %s x %s @ %s each\n\n" "$quantity" "$desc" "$price"
    	printf "%s\t%s\t%s\t%s\n" "$quantity" "$id" "$price" "$desc" >> .cart
    fi
}

# Prompt user for input and call functions based on input
function main() {
    display_version
    read -p 'Selection (h for help)? ' selection

    while [ "$selection" != q ]
    do
    	case "$selection" in
    	    h) show_help ;;
    	    d) sort_description ;;
    	    i) sort_number ;;
    	    p) sort_price ;;
    	    s) show_cart ;;
    	    t) show_total ;;
    	    a) abort_transaction ;;
    	    f) finalize_transaction ;;
    	    q) exit 0 ;;
    	    [-0-9]*) add_cart $selection ;;
    	esac
    	read -p 'Selection (h for help)? ' selection
    done
}

main "$@"
